resource "aws_api_gateway_rest_api" "api" {
  name          = var.api_gateway_name
  description = var.api_gateway_description
  body = var.openapi_spec_json
  api_key_source = "AUTHORIZER"
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

module "Deployer"{
  source = "git::git@github.com:ProgramGrader/terraform-aws-kotlin-image-deploy-lambda.git"
  account_id                      = "048962136615"
  application_properties_location = "LambdaAuthorizer/src/main/resources"
  docker_path                     = "../src/main/docker/Dockerfile.native"
  ecr_tags = {
    Type    = "lambda"
    Version = "latest"
  }
  lambda_file_name                = ["Authorizer"]
  lambda_project_directory        = "LambdaAuthorizer"
  region                          = "us-east-2"
}


resource "aws_iam_role" "invocation_role" {
  name = "api_gateway_auth_invocation"
  path = "/"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "invocation_policy" {
  name = "default"
  role = aws_iam_role.invocation_role.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "lambda:InvokeFunction",
      "Effect": "Allow",
      "Resource": "${module.Deployer.lambda_arn["Authorizer"]}"
    }
  ]
}
EOF
}

resource "aws_iam_role" "lambda" {
  name = "Authorizer"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}



resource "aws_api_gateway_authorizer" "Token_Authorizer" {
  depends_on = [module.Deployer]
  name                   = "APITokenAuthorizer"
  rest_api_id            = aws_api_gateway_rest_api.api.id
  authorizer_uri         = module.Deployer.lambda_invoke_arn["Authorizer"]
  authorizer_credentials = aws_iam_role.invocation_role.arn
}


// Api key who's value is generated by aws on creation
// TODO migrate all deployment to terraform cloud
resource "aws_api_gateway_api_key" "apikey" {
  name = "BackendKey"
}

# TODO needs to rotate
resource "aws_secretsmanager_secret" "secret" {
  name = "APIAuthenticator"
}

resource "aws_secretsmanager_secret_version" "version" {
  secret_id = aws_secretsmanager_secret.secret.id
  secret_string = aws_api_gateway_api_key.apikey.value
}
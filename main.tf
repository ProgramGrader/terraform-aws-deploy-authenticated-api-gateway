resource "aws_api_gateway_rest_api" "api" {
  name          = var.api_gateway_name
  description = var.api_gateway_description
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

data "aws_lambda_function" "lambda_auth" {
  function_name = "LambdaAuthorizer"
}

data "aws_iam_role" "invocation_role" {
  name = "gateway_auth_invocation"
}
resource "aws_api_gateway_authorizer" "Token_Authorizer" {
  name                   = "APITokenAuthorizer"
  rest_api_id            = aws_api_gateway_rest_api.api.id
  authorizer_uri         = data.aws_lambda_function.lambda_auth.invoke_arn
  authorizer_credentials = data.aws_iam_role.invocation_role.arn
#  identity_source                  = "method.request.header.Authorizer"
  //type = "TOKEN"
}

// Api key who's value is generated by aws on creation
// TODO migrate all deployment to terraform cloud
resource "random_id" "api_auth" {
 // count = var.authenticator_exists == false ? 0 : 1
  byte_length = 8
}

# TODO needs to rotate
resource "aws_secretsmanager_secret" "secret" {
  //count = var.authenticator_exists == false ? 0 : 1
  name = "AuthenticatorGateway"
  recovery_window_in_days = 0
  force_overwrite_replica_secret = true
}


resource "aws_secretsmanager_secret_version" "version" {
  //count = var.authenticator_exists == false ? 0 : 1
  secret_id = aws_secretsmanager_secret.secret.id
  secret_string = random_id.api_auth.id
}

#data "aws_secretsmanager_secret" "version" {
#  count = var.authenticator_exists == false ? 1 : 0
#  name = "AuthenticatorGateway"
#}